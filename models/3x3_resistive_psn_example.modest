// [info][section start] Section automatically generated by `type()` in 'noc.py'
option "dtmc";
// [info][section end] Section automatically generated by `type()`

// [info][section start] Section automatically generated by `user_defined_constants()` in 'noc.py'
//----- User Defined Constants -----

// #CUSTOMIZE
// Set the dimensions for the NoC, note that square dimensions are currently
// the only accepted dimensions
const int NOC_MESH_WIDTH = 3;
const int NOC_MESH_HEIGHT = 3;

// #CUSTOMIZE 
// This value changes the buffer length of all buffers.
const int BUFFER_LENGTH = 4;

// #CUSTOMIZE 
// These values change the frequency with witch flits are injected.
const int INJECTION_RATE_NUMERATOR = 3;
const int INJECTION_RATE_DENOMINATOR = 10;

// #CUSTOMIZE
// This represents a cyclic clock counter that wraps from 0 to INJECTION_RATE_DENOMINATOR - 1
// and it's used to determine the flit generation pattern. For unique patterns you'll need
// to adjust this to meet your use case.
int(0..INJECTION_RATE_DENOMINATOR) clk = 0;
transient int(0..1) clk_indicator;

// #CUSTOMIZE the number of buffers a router must service before noise will be incremented.
const int ACTIVITY_THRESH = 3;

// #CUSTOMIZE this is the upper threshoold for noise detected in the system.
const int RESISTIVE_NOISE_THRESH = 1;
const int INDUCTIVE_NOISE_THRESH = 1;
// [info][section end] Section automatically generated by `user_defined_constants()`

// [info][section start] Section automatically generated by `calculated_constants()` in 'noc.py'
// ----- Calculated Constants -----

// The max id for each router in the NoC. Ids range from 0 to NOC_MAX_ID in a
// left-to-right, line by line pattern in the NoC
/*
e.g. a 2x2 NoC with it's corresponding ids

 0 -- 1
 |    |
 2 -- 3
*/
const int NOC_MAX_ID = (NOC_MESH_WIDTH * NOC_MESH_HEIGHT) - 1;

// Enumerated values representing the different directions in the
// mesh
const int NORTH = 0;
const int WEST = 1;
const int EAST = 2;
const int SOUTH = 3;
const int LOCAL = 4;
const int NO_CONNECT = -1;
// [info][section end] Section automatically generated by `calculated_constants()`

// [info][section start] Section automatically generated by `functional_datatypes()` in 'noc.py'
// ----- Functional Datatypes -----

datatype buffer = {
    int(0..NOC_MAX_ID) hd,
    buffer option tl
};

datatype channel = {
    buffer option buffer,
    bool serviced,
    bool isEmpty,
    bool isFull
};

datatype router = {
    channel[] channels,
    int(-1..NOC_MAX_ID)[] ids,
    int(0..4)[] priority_list,
    int(0..4)[] priority_list_temp,
    int(0..4) serviced_index,
    int(0..4) unserviced_index,
    int(0..5) total_unserviced,
	int thisActivity,
	int lastActivity,
    bool[] used
};
// [info][section end] Section automatically generated by `functional_datatypes()`

// [info][section start] Section automatically generated by `verification_datatypes()` in 'noc.py'
// ----- Verification Datatypes -----

datatype sendCounter = {
    int(0..2)[] counts
};
// [info][section end] Section automatically generated by `verification_datatypes()`

// [info][section start] Section automatically generated by `variables()` in 'noc.py'
// ----- Variables -----

// [info][section start] Section automatically generated by `noc_init()` in 'noc.py'
router[] noc = [
router {
    channels: [
        channel {buffer: none, serviced: false, isEmpty: true, isFull: false},
        channel {buffer: none, serviced: false, isEmpty: true, isFull: false},
        channel {buffer: none, serviced: false, isEmpty: true, isFull: false},
        channel {buffer: none, serviced: false, isEmpty: true, isFull: false},
        channel {buffer: none, serviced: false, isEmpty: true, isFull: false}],
    ids: [NO_CONNECT, NO_CONNECT, 1, 3],
    priority_list: [NORTH, EAST, SOUTH, WEST, LOCAL],
    priority_list_temp: [0, 0, 0, 0, 0],
    serviced_index: 0,
    unserviced_index: 0,
    total_unserviced: 0,
    thisActivity: 0,
    lastActivity: 0,
    used: [false, false, false, false, false]
},
router {
    channels: [
        channel {buffer: none, serviced: false, isEmpty: true, isFull: false},
        channel {buffer: none, serviced: false, isEmpty: true, isFull: false},
        channel {buffer: none, serviced: false, isEmpty: true, isFull: false},
        channel {buffer: none, serviced: false, isEmpty: true, isFull: false},
        channel {buffer: none, serviced: false, isEmpty: true, isFull: false}],
    ids: [NO_CONNECT, 0, 2, 4],
    priority_list: [NORTH, EAST, SOUTH, WEST, LOCAL],
    priority_list_temp: [0, 0, 0, 0, 0],
    serviced_index: 0,
    unserviced_index: 0,
    total_unserviced: 0,
    thisActivity: 0,
    lastActivity: 0,
    used: [false, false, false, false, false]
},
router {
    channels: [
        channel {buffer: none, serviced: false, isEmpty: true, isFull: false},
        channel {buffer: none, serviced: false, isEmpty: true, isFull: false},
        channel {buffer: none, serviced: false, isEmpty: true, isFull: false},
        channel {buffer: none, serviced: false, isEmpty: true, isFull: false},
        channel {buffer: none, serviced: false, isEmpty: true, isFull: false}],
    ids: [NO_CONNECT, 1, NO_CONNECT, 5],
    priority_list: [NORTH, EAST, SOUTH, WEST, LOCAL],
    priority_list_temp: [0, 0, 0, 0, 0],
    serviced_index: 0,
    unserviced_index: 0,
    total_unserviced: 0,
    thisActivity: 0,
    lastActivity: 0,
    used: [false, false, false, false, false]
},
router {
    channels: [
        channel {buffer: none, serviced: false, isEmpty: true, isFull: false},
        channel {buffer: none, serviced: false, isEmpty: true, isFull: false},
        channel {buffer: none, serviced: false, isEmpty: true, isFull: false},
        channel {buffer: none, serviced: false, isEmpty: true, isFull: false},
        channel {buffer: none, serviced: false, isEmpty: true, isFull: false}],
    ids: [0, NO_CONNECT, 4, 6],
    priority_list: [NORTH, EAST, SOUTH, WEST, LOCAL],
    priority_list_temp: [0, 0, 0, 0, 0],
    serviced_index: 0,
    unserviced_index: 0,
    total_unserviced: 0,
    thisActivity: 0,
    lastActivity: 0,
    used: [false, false, false, false, false]
},
router {
    channels: [
        channel {buffer: none, serviced: false, isEmpty: true, isFull: false},
        channel {buffer: none, serviced: false, isEmpty: true, isFull: false},
        channel {buffer: none, serviced: false, isEmpty: true, isFull: false},
        channel {buffer: none, serviced: false, isEmpty: true, isFull: false},
        channel {buffer: none, serviced: false, isEmpty: true, isFull: false}],
    ids: [1, 3, 5, 7],
    priority_list: [NORTH, EAST, SOUTH, WEST, LOCAL],
    priority_list_temp: [0, 0, 0, 0, 0],
    serviced_index: 0,
    unserviced_index: 0,
    total_unserviced: 0,
    thisActivity: 0,
    lastActivity: 0,
    used: [false, false, false, false, false]
},
router {
    channels: [
        channel {buffer: none, serviced: false, isEmpty: true, isFull: false},
        channel {buffer: none, serviced: false, isEmpty: true, isFull: false},
        channel {buffer: none, serviced: false, isEmpty: true, isFull: false},
        channel {buffer: none, serviced: false, isEmpty: true, isFull: false},
        channel {buffer: none, serviced: false, isEmpty: true, isFull: false}],
    ids: [2, 4, NO_CONNECT, 8],
    priority_list: [NORTH, EAST, SOUTH, WEST, LOCAL],
    priority_list_temp: [0, 0, 0, 0, 0],
    serviced_index: 0,
    unserviced_index: 0,
    total_unserviced: 0,
    thisActivity: 0,
    lastActivity: 0,
    used: [false, false, false, false, false]
},
router {
    channels: [
        channel {buffer: none, serviced: false, isEmpty: true, isFull: false},
        channel {buffer: none, serviced: false, isEmpty: true, isFull: false},
        channel {buffer: none, serviced: false, isEmpty: true, isFull: false},
        channel {buffer: none, serviced: false, isEmpty: true, isFull: false},
        channel {buffer: none, serviced: false, isEmpty: true, isFull: false}],
    ids: [3, NO_CONNECT, 7, NO_CONNECT],
    priority_list: [NORTH, EAST, SOUTH, WEST, LOCAL],
    priority_list_temp: [0, 0, 0, 0, 0],
    serviced_index: 0,
    unserviced_index: 0,
    total_unserviced: 0,
    thisActivity: 0,
    lastActivity: 0,
    used: [false, false, false, false, false]
},
router {
    channels: [
        channel {buffer: none, serviced: false, isEmpty: true, isFull: false},
        channel {buffer: none, serviced: false, isEmpty: true, isFull: false},
        channel {buffer: none, serviced: false, isEmpty: true, isFull: false},
        channel {buffer: none, serviced: false, isEmpty: true, isFull: false},
        channel {buffer: none, serviced: false, isEmpty: true, isFull: false}],
    ids: [4, 6, 8, NO_CONNECT],
    priority_list: [NORTH, EAST, SOUTH, WEST, LOCAL],
    priority_list_temp: [0, 0, 0, 0, 0],
    serviced_index: 0,
    unserviced_index: 0,
    total_unserviced: 0,
    thisActivity: 0,
    lastActivity: 0,
    used: [false, false, false, false, false]
},
router {
    channels: [
        channel {buffer: none, serviced: false, isEmpty: true, isFull: false},
        channel {buffer: none, serviced: false, isEmpty: true, isFull: false},
        channel {buffer: none, serviced: false, isEmpty: true, isFull: false},
        channel {buffer: none, serviced: false, isEmpty: true, isFull: false},
        channel {buffer: none, serviced: false, isEmpty: true, isFull: false}],
    ids: [5, 7, NO_CONNECT, NO_CONNECT],
    priority_list: [NORTH, EAST, SOUTH, WEST, LOCAL],
    priority_list_temp: [0, 0, 0, 0, 0],
    serviced_index: 0,
    unserviced_index: 0,
    total_unserviced: 0,
    thisActivity: 0,
    lastActivity: 0,
    used: [false, false, false, false, false]
}];
// [info][section end] Section automatically generated by `noc_init()`

// [info][section start] Section automatically generated by `noise_tracking_init()` in 'noc.py'
int resistiveNoise = 0;
int inductiveNoise = 0;
// [info][section end] Section automatically generated by `noise_tracking_init()`

// [info][section end] Section automatically generated by `variables()`

// [info][section start] Section automatically generated by `functions()` in 'noc.py'
// ----- Integer functions -----

// Saturating addition
function int sat_add(int l, int r, int max) =
    if (l + r) > max then max
    else l + r;

// ----- Boolean Algebra Functions -----

// Boolean implication (l ==> r)
function bool implies(bool l, bool r) = (!l) || r;

// ----- List Functions -----

// Calculate length of list
function int len(buffer option ls) = if ls == none then 0 else 1 + len(ls!.tl);

// Add a flit to the buffer
function buffer option enqueue(int n, buffer option ls) =
    some(buffer {
        hd: n,
        tl: ls
    });

// Remove a flit from the buffer
function buffer option dequeue(buffer option ls) =
    if ls == none then none
    else if ls!.tl == none then none
    else some(buffer {
        hd: ls!.hd,
        tl: dequeue(ls!.tl)
    });

// Returns true if the buffer `ls` contains `id`, otherwise returns false 
function bool contains(int id, buffer option ls) =
	if ls == none then false
    else if ls!.hd == id then true
	else contains(id, ls!.tl);

// Return the front of the queue
function int peekFront(buffer option ls) =
    if ls == none then -1
    else if ls!.tl == none then ls!.hd
    else peekFront(ls!.tl);

// ----- Buffer Specific Functions -----

// Tell if the buffer is full
function bool isBufferFull(buffer option ls) = len(ls) >= BUFFER_LENGTH;

// ----- Routing Functions

// Get the mirror direction to determine what buffer will receive the flit
// e.g. if we are R0 and we are sending across the South Channel to R2,
// then R2 should receive the flit in their North Buffer
function int getDestinationChannel(int dir) =
    if dir == NORTH then SOUTH
    else if dir == WEST then EAST
    else if dir == EAST then WEST
    else if dir == SOUTH then NORTH
    else -1;

// Calculate what column a specific ID is destined for
function int idToColumn(int id) = (id % NOC_MESH_WIDTH);

// Calculate what row a specific ID is destined for
function int idToRow(int id) = (int)(id / NOC_MESH_HEIGHT);

// Determine if the flits destination is in the same column as the current router
// Returns < 0 if id needs to go to the left, > 0 to go right, and 0 if it's the
// correct column
function int getColumnShift(int id, int dst) = idToColumn(dst) - idToColumn(id);
// [info][section end] Section automatically generated by `functions()`

// [info][section start] Section automatically generated by `processes()` in 'noc.py'
// ----- Processes -----
// General guidance for processes is that we want as much synchronized assignments to happen
// as possible. A digital system is by default a synchronous system, so we don't typically
// need worry about interleavings for our design. To accomplish this most processes also 
// have an associated action with the same name that synchronizes assignments between
// routers within those processes.

// #CUSTOMIZE
// This method is how flits are generated for the NoC. To change the flit injection pattern
// change this method.
// Flits are injected into a router's LOCAL buffer and then the router automatically routes
// the flits to their destination.
action generateFlits;
process GenerateFlits(int id) {
    int(0..NOC_MAX_ID) destination;

    if (!isBufferFull(noc[id].channels[LOCAL].buffer) && clk < INJECTION_RATE_NUMERATOR) {
        // Add the new flit to the local buffer
        // If the destination is greater than or equal to the ID, we shift it
        // up by one to exclude the possiblity of sending a flit to ourselves
        generateFlits {=
            0: destination = DiscreteUniform(0, NOC_MAX_ID - 1),
            1: noc[id].channels[LOCAL].buffer = 
                enqueue(destination >= id ? 
                            destination + 1 : 
                            destination, noc[id].channels[LOCAL].buffer)
        =}
    }
    else {
        generateFlits // Take this action instead of tau for better synchronization
    }
}
// Set the `isEmpty` and `isFull` flags for each channel based off the current
// state of the buffers in the channel
action prepRouter;
process PrepRouter(int id) {
    // Prep all the channels
    prepRouter {=
        // North Channel (0)
        noc[id].channels[NORTH].isEmpty = len(noc[id].channels[NORTH].buffer) == 0,
        noc[id].channels[NORTH].isFull = isBufferFull(noc[id].channels[NORTH].buffer),

        // WEST Channel (1)
        noc[id].channels[WEST].isEmpty = len(noc[id].channels[WEST].buffer) == 0,
        noc[id].channels[WEST].isFull = isBufferFull(noc[id].channels[WEST].buffer),

        // East Channel (2)
        noc[id].channels[EAST].isEmpty = len(noc[id].channels[EAST].buffer) == 0,
        noc[id].channels[EAST].isFull = isBufferFull(noc[id].channels[EAST].buffer),

        // South Channel (3)
        noc[id].channels[SOUTH].isEmpty = len(noc[id].channels[SOUTH].buffer) == 0,
        noc[id].channels[SOUTH].isFull = isBufferFull(noc[id].channels[SOUTH].buffer),

        // Local Channel (4)
        noc[id].channels[LOCAL].isEmpty = len(noc[id].channels[LOCAL].buffer) == 0,
        noc[id].channels[LOCAL].isFull = isBufferFull(noc[id].channels[LOCAL].buffer)
    =}
}

// Send a flit from Router `id` across channel `ch` in the specified direction `dir`
process Send(int id, int ch, int dir) {
    advanceChannel;

    // If the destination is not full, and the channel has not been used in this cycle, then service the buffer
    if(!noc[noc[id].ids[dir]].channels[getDestinationChannel(dir)].isFull && !noc[id].used[dir]){
        advanceChannelSend {=
            // Add flit to destination buffer
            1: noc[noc[id].ids[dir]].channels[getDestinationChannel(dir)].buffer =
                enqueue(peekFront(noc[id].channels[ch].buffer), noc[noc[id].ids[dir]].channels[getDestinationChannel(dir)].buffer),

            // Then, remove it from the source buffer
            2: noc[id].channels[ch].buffer = dequeue(noc[id].channels[ch].buffer),

            // Mark that output as used and that channel as serviced
            4: noc[id].used[dir] = true,
            4: noc[id].channels[ch].serviced = true,

			// Increment the count for buffers serviced in this cycle
			4: noc[id].thisActivity++
        =}
    }
    // Otherwise, increment total unserviced buffers
    else{
        advanceChannelSend {=
            noc[id].total_unserviced++
        =}
    }
}

// Determine which direction to send the front-most flit in channel `ch` of router `id`
process AdvanceFlits(int id, int ch) {
    // If flit needs to stay on this row
    if(getColumnShift(id, peekFront(noc[id].channels[ch].buffer)) == 0) {
        // Send it north
        if(peekFront(noc[id].channels[ch].buffer) < id){
            Send(id, ch, NORTH)
        }
        // Or send it south
        else{
            Send(id, ch, SOUTH)
        }
    }
    // Else, if flit needs to go west
    else if(getColumnShift(id, peekFront(noc[id].channels[ch].buffer)) < 0) {
        Send(id, ch, WEST)
    }
    // Else, flit needs to go east
    else{
        Send(id, ch, EAST)
    }
}

// Advance a specific channel `ch` in router `id`
action advanceChannel;
action advanceChannelSend;
process AdvanceChannel(int id, int ch) {
    // If this channel was not assigned a neighbor or if it is
    // empty, then mark it as serviced and move on to the next one
    if ((ch != 4 && noc[id].ids[ch] == NO_CONNECT) || noc[id].channels[ch].isEmpty == true) {
        advanceChannel {=
            // Mark the channel as serviced
            noc[id].channels[ch].serviced = true
        =};
	    advanceChannelSend
    }
    // If the flit has reached its destination...
    else if (peekFront(noc[id].channels[ch].buffer) == id) {
        advanceChannel {=
            /* -- if the local channel has not been used this clock cycle -- */
            // Mark the channel as serviced and used
            noc[id].channels[ch].serviced = !noc[id].used[LOCAL],
            noc[id].used[LOCAL] = !noc[id].used[LOCAL],

            // Remove this flit. It has reached its destination
            noc[id].channels[ch].buffer = !noc[id].used[LOCAL] ? dequeue(noc[id].channels[ch].buffer) : noc[id].channels[ch].buffer,

            // Increment the activity for this cycle as we removed a flit
            noc[id].thisActivity = !noc[id].used[LOCAL] ? noc[id].thisActivity + 1 : noc[id].thisActivity,

            /* -- if the local channel has been used this clock cycle -- */
            // Otherwise, increment total unserviced buffers
            noc[id].total_unserviced = !noc[id].used[LOCAL] ? noc[id].total_unserviced : noc[id].total_unserviced + 1
        =};
	    advanceChannelSend
    }
    // Otherwise, the flit must be for another router
    else {
        AdvanceFlits(id, ch)
    }
}

// Advance every channel in the router in the order of the priority list
process AdvanceRouter(int id) {
    AdvanceChannel(id, noc[id].priority_list[0]);
    AdvanceChannel(id, noc[id].priority_list[1]);
    AdvanceChannel(id, noc[id].priority_list[2]);
    AdvanceChannel(id, noc[id].priority_list[3]);
    AdvanceChannel(id, noc[id].priority_list[4])
}

// Update the priority list value at index `i` in router `id`
process UpdatePriorityList(int id, int i) {
    if (noc[id].channels[noc[id].priority_list[i]].serviced) {
        updatePriority {=
            0: noc[id].priority_list_temp[noc[id].total_unserviced + noc[id].serviced_index] = noc[id].priority_list[i],
            1: noc[id].serviced_index++
        =}
    }
    else {
        updatePriority {=
            0: noc[id].priority_list_temp[noc[id].unserviced_index] = noc[id].priority_list[i],
            1: noc[id].unserviced_index++
        =}
    }
}

// Update the entire priority list (schedule) for router `id`
action updatePriority;
process UpdatePiority(int id) {
    // Reset all of the temp values
    updatePriority {=
        noc[id].priority_list_temp = [0, 0, 0, 0, 0],
        noc[id].serviced_index = 0,
        noc[id].unserviced_index = 0
    =};

    // Update the ordering of priorities in the lists
    UpdatePriorityList(id, 0);
    UpdatePriorityList(id, 1);
    UpdatePriorityList(id, 2);
    UpdatePriorityList(id, 3);
    UpdatePriorityList(id, 4);

    updatePriority {=
        // Make our next priority list the current priority list
        // However, if all of our channels are empty, then just reset
        // the priority list. This helps with the state space
        0: noc[id].priority_list = (noc[id].channels[0].isEmpty &&
                                    noc[id].channels[1].isEmpty &&
                                    noc[id].channels[2].isEmpty &&
                                    noc[id].channels[3].isEmpty &&
                                    noc[id].channels[4].isEmpty) ?
                                    [NORTH, EAST, SOUTH, WEST, LOCAL] : noc[id].priority_list_temp,

        // Reset the used and serviced variables
        1: noc[id].channels[0].serviced = false,
        1: noc[id].channels[1].serviced = false,
        1: noc[id].channels[2].serviced = false,
        1: noc[id].channels[3].serviced = false,
        1: noc[id].channels[4].serviced = false,
        1: noc[id].total_unserviced = 0,
        1: noc[id].used = [false, false, false, false, false],
        1: noc[id].priority_list_temp = [0, 0, 0, 0, 0],
        1: noc[id].serviced_index = 0,
        1: noc[id].unserviced_index = 0
    =}
}

process UpdateGlobalNoiseTracking(int id) {
    {= 
       // Update inductive noise
       0: inductiveNoise += abs(noc[id].lastActivity - noc[id].thisActivity) >= ACTIVITY_THRESH ? 1 : 0,

       // Update resistive noise
       0: resistiveNoise += noc[id].thisActivity >= ACTIVITY_THRESH ? 1 : 0,

       // Update trackers for next round
       1: noc[id].lastActivity = noc[id].thisActivity,
       2: noc[id].thisActivity = 0
    =}
}

// Router model
process Router(int id) {
    // Generate new flits
    GenerateFlits(id);

    // Determine what channels will send this cycle
    PrepRouter(id);

    // Send the flits
    AdvanceRouter(id);

    // Update the priority list
    UpdatePiority(id);

    // Update noise tracking
    UpdateGlobalNoiseTracking(id);

    // Sync w/ the clock -
    nextClockCycle;

    // recursive call for next clock cycle
    Router(id)
}

// Model the cyclic clock
action nextClockCycle;
process Clock() {
    nextClockCycle {= clk = (clk + 1) % INJECTION_RATE_DENOMINATOR, clk_indicator = 1 =};
    Clock()
}
// [info][section end] Section automatically generated by `processes()`

// [info][section start] Section automatically generated by `composition()` in 'noc.py'
par {
    :: Clock()
    :: Router(0)
    :: Router(1)
    :: Router(2)
    :: Router(3)
    :: Router(4)
    :: Router(5)
    :: Router(6)
    :: Router(7)
    :: Router(8)
}
// [info][section end] Section automatically generated by `composition()`

// [info][section start] Section automatically generated by `properties()` in 'noc.py'
property resistiveNoiseProbability1RewardBounded0  = Pmax(<>[S(clk_indicator)<=0] (resistiveNoise >= RESISTIVE_NOISE_THRESH));
property resistiveNoiseProbability1RewardBounded1  = Pmax(<>[S(clk_indicator)<=1] (resistiveNoise >= RESISTIVE_NOISE_THRESH));
property resistiveNoiseProbability1RewardBounded2  = Pmax(<>[S(clk_indicator)<=2] (resistiveNoise >= RESISTIVE_NOISE_THRESH));
property resistiveNoiseProbability1RewardBounded3  = Pmax(<>[S(clk_indicator)<=3] (resistiveNoise >= RESISTIVE_NOISE_THRESH));
property resistiveNoiseProbability1RewardBounded4  = Pmax(<>[S(clk_indicator)<=4] (resistiveNoise >= RESISTIVE_NOISE_THRESH));
property resistiveNoiseProbability1RewardBounded5  = Pmax(<>[S(clk_indicator)<=5] (resistiveNoise >= RESISTIVE_NOISE_THRESH));
property resistiveNoiseProbability1RewardBounded6  = Pmax(<>[S(clk_indicator)<=6] (resistiveNoise >= RESISTIVE_NOISE_THRESH));
property resistiveNoiseProbability1RewardBounded7  = Pmax(<>[S(clk_indicator)<=7] (resistiveNoise >= RESISTIVE_NOISE_THRESH));
property resistiveNoiseProbability1RewardBounded8  = Pmax(<>[S(clk_indicator)<=8] (resistiveNoise >= RESISTIVE_NOISE_THRESH));
property resistiveNoiseProbability1RewardBounded9  = Pmax(<>[S(clk_indicator)<=9] (resistiveNoise >= RESISTIVE_NOISE_THRESH));
property resistiveNoiseProbability1RewardBounded10  = Pmax(<>[S(clk_indicator)<=10] (resistiveNoise >= RESISTIVE_NOISE_THRESH));
property resistiveNoiseProbability1RewardBounded11  = Pmax(<>[S(clk_indicator)<=11] (resistiveNoise >= RESISTIVE_NOISE_THRESH));
property resistiveNoiseProbability1RewardBounded12  = Pmax(<>[S(clk_indicator)<=12] (resistiveNoise >= RESISTIVE_NOISE_THRESH));
property resistiveNoiseProbability1RewardBounded13  = Pmax(<>[S(clk_indicator)<=13] (resistiveNoise >= RESISTIVE_NOISE_THRESH));
property resistiveNoiseProbability1RewardBounded14  = Pmax(<>[S(clk_indicator)<=14] (resistiveNoise >= RESISTIVE_NOISE_THRESH));
property resistiveNoiseProbability1RewardBounded15  = Pmax(<>[S(clk_indicator)<=15] (resistiveNoise >= RESISTIVE_NOISE_THRESH));
property resistiveNoiseProbability1RewardBounded16  = Pmax(<>[S(clk_indicator)<=16] (resistiveNoise >= RESISTIVE_NOISE_THRESH));
property resistiveNoiseProbability1RewardBounded17  = Pmax(<>[S(clk_indicator)<=17] (resistiveNoise >= RESISTIVE_NOISE_THRESH));
property resistiveNoiseProbability1RewardBounded18  = Pmax(<>[S(clk_indicator)<=18] (resistiveNoise >= RESISTIVE_NOISE_THRESH));
property resistiveNoiseProbability1RewardBounded19  = Pmax(<>[S(clk_indicator)<=19] (resistiveNoise >= RESISTIVE_NOISE_THRESH));
property resistiveNoiseProbability1RewardBounded20  = Pmax(<>[S(clk_indicator)<=20] (resistiveNoise >= RESISTIVE_NOISE_THRESH));
property resistiveNoiseProbability1RewardBounded21  = Pmax(<>[S(clk_indicator)<=21] (resistiveNoise >= RESISTIVE_NOISE_THRESH));
property resistiveNoiseProbability1RewardBounded22  = Pmax(<>[S(clk_indicator)<=22] (resistiveNoise >= RESISTIVE_NOISE_THRESH));
property resistiveNoiseProbability1RewardBounded23  = Pmax(<>[S(clk_indicator)<=23] (resistiveNoise >= RESISTIVE_NOISE_THRESH));
property resistiveNoiseProbability1RewardBounded24  = Pmax(<>[S(clk_indicator)<=24] (resistiveNoise >= RESISTIVE_NOISE_THRESH));
property resistiveNoiseProbability1RewardBounded25  = Pmax(<>[S(clk_indicator)<=25] (resistiveNoise >= RESISTIVE_NOISE_THRESH));
property resistiveNoiseProbability1RewardBounded26  = Pmax(<>[S(clk_indicator)<=26] (resistiveNoise >= RESISTIVE_NOISE_THRESH));
property resistiveNoiseProbability1RewardBounded27  = Pmax(<>[S(clk_indicator)<=27] (resistiveNoise >= RESISTIVE_NOISE_THRESH));
property resistiveNoiseProbability1RewardBounded28  = Pmax(<>[S(clk_indicator)<=28] (resistiveNoise >= RESISTIVE_NOISE_THRESH));
property resistiveNoiseProbability1RewardBounded29  = Pmax(<>[S(clk_indicator)<=29] (resistiveNoise >= RESISTIVE_NOISE_THRESH));
property resistiveNoiseProbability1RewardBounded30  = Pmax(<>[S(clk_indicator)<=30] (resistiveNoise >= RESISTIVE_NOISE_THRESH));
property resistiveNoiseProbability1RewardBounded31  = Pmax(<>[S(clk_indicator)<=31] (resistiveNoise >= RESISTIVE_NOISE_THRESH));
property resistiveNoiseProbability1RewardBounded32  = Pmax(<>[S(clk_indicator)<=32] (resistiveNoise >= RESISTIVE_NOISE_THRESH));
property resistiveNoiseProbability1RewardBounded33  = Pmax(<>[S(clk_indicator)<=33] (resistiveNoise >= RESISTIVE_NOISE_THRESH));
property resistiveNoiseProbability1RewardBounded34  = Pmax(<>[S(clk_indicator)<=34] (resistiveNoise >= RESISTIVE_NOISE_THRESH));
property resistiveNoiseProbability1RewardBounded35  = Pmax(<>[S(clk_indicator)<=35] (resistiveNoise >= RESISTIVE_NOISE_THRESH));
property resistiveNoiseProbability1RewardBounded36  = Pmax(<>[S(clk_indicator)<=36] (resistiveNoise >= RESISTIVE_NOISE_THRESH));
property resistiveNoiseProbability1RewardBounded37  = Pmax(<>[S(clk_indicator)<=37] (resistiveNoise >= RESISTIVE_NOISE_THRESH));
property resistiveNoiseProbability1RewardBounded38  = Pmax(<>[S(clk_indicator)<=38] (resistiveNoise >= RESISTIVE_NOISE_THRESH));
property resistiveNoiseProbability1RewardBounded39  = Pmax(<>[S(clk_indicator)<=39] (resistiveNoise >= RESISTIVE_NOISE_THRESH));
property resistiveNoiseProbability1RewardBounded40  = Pmax(<>[S(clk_indicator)<=40] (resistiveNoise >= RESISTIVE_NOISE_THRESH));
property resistiveNoiseProbability1RewardBounded41  = Pmax(<>[S(clk_indicator)<=41] (resistiveNoise >= RESISTIVE_NOISE_THRESH));
property resistiveNoiseProbability1RewardBounded42  = Pmax(<>[S(clk_indicator)<=42] (resistiveNoise >= RESISTIVE_NOISE_THRESH));
property resistiveNoiseProbability1RewardBounded43  = Pmax(<>[S(clk_indicator)<=43] (resistiveNoise >= RESISTIVE_NOISE_THRESH));
property resistiveNoiseProbability1RewardBounded44  = Pmax(<>[S(clk_indicator)<=44] (resistiveNoise >= RESISTIVE_NOISE_THRESH));
property resistiveNoiseProbability1RewardBounded45  = Pmax(<>[S(clk_indicator)<=45] (resistiveNoise >= RESISTIVE_NOISE_THRESH));
property resistiveNoiseProbability1RewardBounded46  = Pmax(<>[S(clk_indicator)<=46] (resistiveNoise >= RESISTIVE_NOISE_THRESH));
property resistiveNoiseProbability1RewardBounded47  = Pmax(<>[S(clk_indicator)<=47] (resistiveNoise >= RESISTIVE_NOISE_THRESH));
property resistiveNoiseProbability1RewardBounded48  = Pmax(<>[S(clk_indicator)<=48] (resistiveNoise >= RESISTIVE_NOISE_THRESH));
property resistiveNoiseProbability1RewardBounded49  = Pmax(<>[S(clk_indicator)<=49] (resistiveNoise >= RESISTIVE_NOISE_THRESH));
property resistiveNoiseProbability1RewardBounded50  = Pmax(<>[S(clk_indicator)<=50] (resistiveNoise >= RESISTIVE_NOISE_THRESH));
property resistiveNoiseProbability1RewardBounded51  = Pmax(<>[S(clk_indicator)<=51] (resistiveNoise >= RESISTIVE_NOISE_THRESH));
property resistiveNoiseProbability1RewardBounded52  = Pmax(<>[S(clk_indicator)<=52] (resistiveNoise >= RESISTIVE_NOISE_THRESH));
property resistiveNoiseProbability1RewardBounded53  = Pmax(<>[S(clk_indicator)<=53] (resistiveNoise >= RESISTIVE_NOISE_THRESH));
property resistiveNoiseProbability1RewardBounded54  = Pmax(<>[S(clk_indicator)<=54] (resistiveNoise >= RESISTIVE_NOISE_THRESH));
property resistiveNoiseProbability1RewardBounded55  = Pmax(<>[S(clk_indicator)<=55] (resistiveNoise >= RESISTIVE_NOISE_THRESH));
property resistiveNoiseProbability1RewardBounded56  = Pmax(<>[S(clk_indicator)<=56] (resistiveNoise >= RESISTIVE_NOISE_THRESH));
property resistiveNoiseProbability1RewardBounded57  = Pmax(<>[S(clk_indicator)<=57] (resistiveNoise >= RESISTIVE_NOISE_THRESH));
property resistiveNoiseProbability1RewardBounded58  = Pmax(<>[S(clk_indicator)<=58] (resistiveNoise >= RESISTIVE_NOISE_THRESH));
property resistiveNoiseProbability1RewardBounded59  = Pmax(<>[S(clk_indicator)<=59] (resistiveNoise >= RESISTIVE_NOISE_THRESH));
property resistiveNoiseProbability1RewardBounded60  = Pmax(<>[S(clk_indicator)<=60] (resistiveNoise >= RESISTIVE_NOISE_THRESH));
property resistiveNoiseProbability1RewardBounded61  = Pmax(<>[S(clk_indicator)<=61] (resistiveNoise >= RESISTIVE_NOISE_THRESH));
property resistiveNoiseProbability1RewardBounded62  = Pmax(<>[S(clk_indicator)<=62] (resistiveNoise >= RESISTIVE_NOISE_THRESH));
property resistiveNoiseProbability1RewardBounded63  = Pmax(<>[S(clk_indicator)<=63] (resistiveNoise >= RESISTIVE_NOISE_THRESH));
property resistiveNoiseProbability1RewardBounded64  = Pmax(<>[S(clk_indicator)<=64] (resistiveNoise >= RESISTIVE_NOISE_THRESH));
property resistiveNoiseProbability1RewardBounded65  = Pmax(<>[S(clk_indicator)<=65] (resistiveNoise >= RESISTIVE_NOISE_THRESH));
property resistiveNoiseProbability1RewardBounded66  = Pmax(<>[S(clk_indicator)<=66] (resistiveNoise >= RESISTIVE_NOISE_THRESH));
property resistiveNoiseProbability1RewardBounded67  = Pmax(<>[S(clk_indicator)<=67] (resistiveNoise >= RESISTIVE_NOISE_THRESH));
property resistiveNoiseProbability1RewardBounded68  = Pmax(<>[S(clk_indicator)<=68] (resistiveNoise >= RESISTIVE_NOISE_THRESH));
property resistiveNoiseProbability1RewardBounded69  = Pmax(<>[S(clk_indicator)<=69] (resistiveNoise >= RESISTIVE_NOISE_THRESH));
property resistiveNoiseProbability1RewardBounded70  = Pmax(<>[S(clk_indicator)<=70] (resistiveNoise >= RESISTIVE_NOISE_THRESH));
property resistiveNoiseProbability1RewardBounded71  = Pmax(<>[S(clk_indicator)<=71] (resistiveNoise >= RESISTIVE_NOISE_THRESH));
property resistiveNoiseProbability1RewardBounded72  = Pmax(<>[S(clk_indicator)<=72] (resistiveNoise >= RESISTIVE_NOISE_THRESH));
property resistiveNoiseProbability1RewardBounded73  = Pmax(<>[S(clk_indicator)<=73] (resistiveNoise >= RESISTIVE_NOISE_THRESH));
property resistiveNoiseProbability1RewardBounded74  = Pmax(<>[S(clk_indicator)<=74] (resistiveNoise >= RESISTIVE_NOISE_THRESH));
property resistiveNoiseProbability1RewardBounded75  = Pmax(<>[S(clk_indicator)<=75] (resistiveNoise >= RESISTIVE_NOISE_THRESH));
property resistiveNoiseProbability1RewardBounded76  = Pmax(<>[S(clk_indicator)<=76] (resistiveNoise >= RESISTIVE_NOISE_THRESH));
property resistiveNoiseProbability1RewardBounded77  = Pmax(<>[S(clk_indicator)<=77] (resistiveNoise >= RESISTIVE_NOISE_THRESH));
property resistiveNoiseProbability1RewardBounded78  = Pmax(<>[S(clk_indicator)<=78] (resistiveNoise >= RESISTIVE_NOISE_THRESH));
property resistiveNoiseProbability1RewardBounded79  = Pmax(<>[S(clk_indicator)<=79] (resistiveNoise >= RESISTIVE_NOISE_THRESH));
property resistiveNoiseProbability1RewardBounded80  = Pmax(<>[S(clk_indicator)<=80] (resistiveNoise >= RESISTIVE_NOISE_THRESH));
property resistiveNoiseProbability1RewardBounded81  = Pmax(<>[S(clk_indicator)<=81] (resistiveNoise >= RESISTIVE_NOISE_THRESH));
property resistiveNoiseProbability1RewardBounded82  = Pmax(<>[S(clk_indicator)<=82] (resistiveNoise >= RESISTIVE_NOISE_THRESH));
property resistiveNoiseProbability1RewardBounded83  = Pmax(<>[S(clk_indicator)<=83] (resistiveNoise >= RESISTIVE_NOISE_THRESH));
property resistiveNoiseProbability1RewardBounded84  = Pmax(<>[S(clk_indicator)<=84] (resistiveNoise >= RESISTIVE_NOISE_THRESH));
property resistiveNoiseProbability1RewardBounded85  = Pmax(<>[S(clk_indicator)<=85] (resistiveNoise >= RESISTIVE_NOISE_THRESH));
property resistiveNoiseProbability1RewardBounded86  = Pmax(<>[S(clk_indicator)<=86] (resistiveNoise >= RESISTIVE_NOISE_THRESH));
property resistiveNoiseProbability1RewardBounded87  = Pmax(<>[S(clk_indicator)<=87] (resistiveNoise >= RESISTIVE_NOISE_THRESH));
property resistiveNoiseProbability1RewardBounded88  = Pmax(<>[S(clk_indicator)<=88] (resistiveNoise >= RESISTIVE_NOISE_THRESH));
property resistiveNoiseProbability1RewardBounded89  = Pmax(<>[S(clk_indicator)<=89] (resistiveNoise >= RESISTIVE_NOISE_THRESH));
property resistiveNoiseProbability1RewardBounded90  = Pmax(<>[S(clk_indicator)<=90] (resistiveNoise >= RESISTIVE_NOISE_THRESH));
property resistiveNoiseProbability1RewardBounded91  = Pmax(<>[S(clk_indicator)<=91] (resistiveNoise >= RESISTIVE_NOISE_THRESH));
property resistiveNoiseProbability1RewardBounded92  = Pmax(<>[S(clk_indicator)<=92] (resistiveNoise >= RESISTIVE_NOISE_THRESH));
property resistiveNoiseProbability1RewardBounded93  = Pmax(<>[S(clk_indicator)<=93] (resistiveNoise >= RESISTIVE_NOISE_THRESH));
property resistiveNoiseProbability1RewardBounded94  = Pmax(<>[S(clk_indicator)<=94] (resistiveNoise >= RESISTIVE_NOISE_THRESH));
property resistiveNoiseProbability1RewardBounded95  = Pmax(<>[S(clk_indicator)<=95] (resistiveNoise >= RESISTIVE_NOISE_THRESH));
property resistiveNoiseProbability1RewardBounded96  = Pmax(<>[S(clk_indicator)<=96] (resistiveNoise >= RESISTIVE_NOISE_THRESH));
property resistiveNoiseProbability1RewardBounded97  = Pmax(<>[S(clk_indicator)<=97] (resistiveNoise >= RESISTIVE_NOISE_THRESH));
property resistiveNoiseProbability1RewardBounded98  = Pmax(<>[S(clk_indicator)<=98] (resistiveNoise >= RESISTIVE_NOISE_THRESH));
property resistiveNoiseProbability1RewardBounded99  = Pmax(<>[S(clk_indicator)<=99] (resistiveNoise >= RESISTIVE_NOISE_THRESH));
property resistiveNoiseProbability1RewardBounded100  = Pmax(<>[S(clk_indicator)<=100] (resistiveNoise >= RESISTIVE_NOISE_THRESH));
// [info][section end] Section automatically generated by `properties()`

